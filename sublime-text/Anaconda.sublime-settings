/*
    Anaconda default settings
*/
{
    /*
        Default python interpreter

        This can (and should) be overridden by project settings.

        NOTE: if you want anaconda to lint and complete using a remote
        python interpreter that runs the anaconda's minserver.py script
        in a remote machine just use it's address:port as interpreter
        for example:

            "python_interpreter": "tcp://my_remote.machine.com:19360"
    */
    "python_interpreter": "python3",

    /*
        If complete_parameters is true, anaconda will add function and class
        parameters to its completions.

        If complete_all_parameters is true, it will add all the possible
        parameters, if it's false, it will add only required parameters
    */
    "complete_parameters": true,
    "complete_all_parameters": false,

    /*
        Do not fix the errors listed here:
        Note: By default we ignore E309 as this is not pep8 but it does
        conflict with pep257 D211.
    */
    "autoformat_ignore":
    [
        "E309"
    ],

    /*
        A list of pep8 error numbers to ignore.
        The list of error codes is in this file:
            https://pycodestyle.readthedocs.io/en/latest/intro.html#error-codes.
        Search for "Ennn:", where nnn is a 3-digit number.
        E309 is ignored by default as it conflicts with pep257 E211
    */
    "pep8_ignore":
    [
        "E309"
    ],

    // Set this to true to turn pep257 checking on.
    "pep257": false,

    /*
        A list of pep257 error numbers to ignore.

        The list can be found here: http://www.pydocstyle.org/en/2.1.1/error_codes.html

        D209: Multi-line docstring should end with 1 blank line is ignored by
        default as this rule has been deprecated.

        D203: 1 blank line before class docstring is ignored by default, as
        this rule has been deprecated.
    */
    "pep257_ignore":
    [
        "D203",
        "D209"
    ],

    /*
        You can ignore some of the "undefined name xxx" errors (comes
        in handy if you work with post-processors, globals/builtins
        available only at runtime, etc.). You can control what names
        will be ignored with the user setting "pyflakes_ignore".

        Example:

        "pyflakes_ignore":
            [
                "some_custom_builtin_o_mine",
                "A_GLOBAL_CONSTANT"
            ],
    */
    "pyflakes_ignore":
    [
    ],

    /*
        Specific error types to ignore for pyflakes.
        (Uncomment to ignore the below error types.)
    */
    "pyflakes_explicit_ignore":
    [
        // "Redefined",
        // "UnusedImport",
        // "UndefinedName",
        // "UndefinedLocal",
        // "UnusedVariable,",
        // "UndefinedExport",
        // "DuplicateArgument",
        // "RedefinedWhileUnused"
    ]

}
